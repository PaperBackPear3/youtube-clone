scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")
scalar Upload @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Upload")

type Query {
    channels: [Channel!]! @all
    channel(id: ID! @eq): Channel @find

##videos
    videos: [Video!]! @paginate(defaultCount: 10)
    video(id: ID! @eq): Video @find
    channelVideos(channel_id: ID! @eq): [Video!]! @paginate(defaultCount: 10)
    searchVideos(query: String!): [Video!]!

##users
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)
    users: [User!]! @all
}

type Mutation {
    createChannel(name: String!, description: String!): Channel
    updateChannel(id: ID!, name: String, description: String): Channel @update
    deleteChannel(id: ID!): Channel @delete

    ##videos
    # createVideo(
    #     channel_id: ID!,
    #     title: String!,
    #     description: String!,
    #     video_path: String!,
    #     thumbnail:String
    #     ): Video
    updateVideo(id: ID!, title: String, description: String, video_url: String): Video @update
    deleteVideo(id: ID!): Video @delete
    # likeVideo(id: ID!): Video
    # dislikeVideo(id: ID!): Video
    # viewVideo(id: ID!): Video
    # commentVideo(id: ID!, comment: String!): Video
    # updateThumbnail(id: ID!, thumbnail: String!): Video
    "Upload a file that is publicly available."
    uploadVideo(file: Upload! @validator): String 

    #users
    createUser(name: String!, email: String!, password: String!): User @create
    updateUser(id: ID, email: String, password: String): User @update
    deleteUser(id: ID!): User @delete

    # #login
    # login(email: String!, password: String!): User! @login
    # logout: User @guard
}

type Channel {
    id: ID!
    name: String!
    members_count: Int!
    image: String!
    avatar: String!
    description: String!
    created_at: DateTime!
    updated_at: DateTime!
    deleted_at: DateTime!
}





####################################################################################################




# "A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
# scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

# "Indicates what fields are available at the top level of a query operation."
# type Query {
#     "Find a single user by an identifying attribute."
#     user(
#       "Search by primary key."
#       id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

#       "Search by email address."
#       email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
#     ): User @find

#     "List multiple users."
#     users(
#       "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
#       name: String @where(operator: "like")
#     ): [User!]! @paginate(defaultCount: 10)
#     users: [User!]! @all
# }

# type Mutation {
#   createUser(name: String!, email: String!, password: String!): User @create
#   updateUser(id: ID, email: String, password: String): User @update
#   deleteUser(id: ID!): User @delete
# }

# type Subscription {
#   userCreated: User @subscribe
#   userUpdated: User @subscribe
#   userDeleted: User @subscribe
# }

# type Mutation {
#   login(email: String!, password: String!): User! @login
#   logout: User @guard
# }



"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!
 
    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!

    "When the account was deleted"
    deleted_at: DateTime!
}



####################################################################################################


"Can be used as an argument to upload files using https://github.com/jaydenseric/graphql-multipart-request-spec"
# scalar Upload @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Upload")


# type Query{
#     videos: [Video!]! @paginate(defaultCount: 10)
#     video(id: ID! @eq): Video @find
#     channelVideos(channel_id: ID! @eq): [Video!]! @paginate(defaultCount: 10)
#     searchVideos(query: String!): [Video!]!
# }

# type Mutation{
#     # createVideo(
#     #     channel_id: ID!,
#     #     title: String!,
#     #     description: String!,
#     #     video_path: String!,
#     #     thumbnail:String
#     #     ): Video
#     updateVideo(id: ID!, title: String, description: String, video_url: String): Video @update
#     deleteVideo(id: ID!): Video @delete
#     # likeVideo(id: ID!): Video
#     # dislikeVideo(id: ID!): Video
#     # viewVideo(id: ID!): Video
#     # commentVideo(id: ID!, comment: String!): Video
#     # updateThumbnail(id: ID!, thumbnail: String!): Video
#     "Upload a file that is publicly available."
#     uploadVideo(file: Upload! @validator): String 
# }


type Video{
    id: ID!
    channel_id: ID
    title: String!
    description: String!
    video_path: String!
    views_count: Int
    likes_count: Int
    dislikes_count: Int
    comments_count: Int
    thumbnail: String
    created_at: DateTime
    updated_at: DateTime
    deleted_at: DateTime
    duration: Int
}



####################################################################################################